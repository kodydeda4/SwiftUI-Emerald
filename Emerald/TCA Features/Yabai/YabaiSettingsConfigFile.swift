//
//  YabaiConfigFile.swift
//  Emerald
//
//  Created by Kody Deda on 3/3/21.
//

import Foundation

extension YabaiSettings.State {
    var asConfig: String {
        let divStr = "#========================================================="
        
        return [
            "#   ██╗   ██╗ █████╗ ██████╗  █████╗ ██╗",
            "#   ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗██║",
            "#    ╚████╔╝ ███████║██████╔╝███████║██║",
            "#     ╚██╔╝  ██╔══██║██╔══██╗██╔══██║██║",
            "#      ██║   ██║  ██║██████╔╝██║  ██║██║",
            "#      ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝",
            "#",
            "",
            divStr,
            "# TEMPORARILY HARDCODED",
            divStr,
            "yabai -m rule --add label=\"System Preferences\" app=\"^System Preferences$\" manage=off",
            "",
            divStr,
            "# General",
            divStr,
            "yabai -m config debug_output \(debugOutput == true ? "on" : "off")",
            "yabai -m config external_bar \(externalBar):\(topPaddingExternalBar):\(bottomPaddingExternalBar)",
            "yabai -m config mouse_follows_focus \(mouseFollowsFocus == true ? "on" : "off")",
            "yabai -m config focus_follows_mouse \(focusFollowsMouse)",
            "",
            divStr,
            "# Window Misc",
            divStr,
            "yabai -m config window_placement \(windowPlacement)",
            "yabai -m config window_shadow \(windowShadow)",
            "",
            divStr,
            "# Window Opacity",
            divStr,
            "yabai -m config window_opacity \(windowOpacity == true ? "on" : "off")",
            "yabai -m config window_opacity_duration \(windowOpacityDuration)",
            "yabai -m config active_window_opacity \(activeWindowOpacity)",
            "yabai -m config normal_window_opacity \(normalWindowOpacity)",
            "",
            divStr,
            "# Window Borders",
            divStr,
            "yabai -m config window_border \(windowBorder == true ? "on" : "off")",
            "yabai -m config window_border_width \(windowBorderWidth)",
            "yabai -m config active_window_border_color \"\(activeWindowBorderColor.asHexString)\"",
            "yabai -m config normal_window_border_color \"\(normalWindowBorderColor.asHexString)\"",
            "yabai -m config insert_window_border_color \"\(insertWindowBorderColor.asHexString)\"",
            "",
            divStr,
            "# Misc",
            divStr,
            "yabai -m config split_ratio \(splitRatio)",
            "yabai -m config auto_balance \(autoBalance == true ? "on" : "off")",
            "",
            divStr,
            "# Mouse Actions",
            divStr,
            "yabai -m config mouse_modifier \(mouseModifier)",
            "yabai -m config mouse_action1 \(mouseAction1)",
            "yabai -m config mouse_action2 \(mouseAction2)",
            "yabai -m config mouse_drop_action \(mouseDropAction)",
            "",
            divStr,
            "# Space Settings",
            divStr,
            "yabai -m config layout \(layout)",
            "yabai -m config top_padding \(paddingTop)",
            "yabai -m config bottom_padding \(paddingBottom)",
            "yabai -m config left_padding \(paddingLeft)",
            "yabai -m config right_padding \(paddingRight)",
            "yabai -m config window_gap \(windowGap)",
            "",
            divStr,
            "# Load Scripting Addition",
            divStr,
            "sudo yabai --load-sa",
            "yabai -m signal --add event=dock_did_restart action=\"sudo yabai --load-sa\"",
            divStr,
            "",
            "# Scripting Addition Options",
            "yabai -m config window_topmost \(windowTopmost == true ? "on" : "off")",
        ]
        .joined(separator: "\n")
    }
}
